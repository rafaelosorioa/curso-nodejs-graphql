#Moved type definitions
# Scalar types define types and resolver for said types
# Added ! to avoid null values
# Define a new Object type

# List definition for graphql
# [Int]
# [String]
type Query {
  hello: String!
  getPerson(name: String, age: Int): String
  getInt(age: Int!): Int
  getFloat: Float
  getString: String
  getBoolean: Boolean
  getID: ID
  getNumbers(numbers: [Int!]!): [Int]

  #Product types
  product(id: ID!): Product
  products: [Product!]!
}

# Define product type
type Product {
  id: ID!
  name: String!
  price: Float!
  description: String!
  image: String!
  createdAt: String!
  categoryId: ID!
  category: Category!
}

type Category {
  id: ID!
  name: String!
  image: String!
}

#Mutation
type Mutation {
  addProduct(dto: CreateProductInput!): Product
  updateProduct(id: ID!, dto: UpdateProductInput!): Product
  deleteProduct(id: ID!): ID
}

# Is like a DTO
input CreateProductInput {
  name: String!
  price: Float!
  description: String!
  image: String!
  categoryId: ID!
}

input UpdateProductInput {
  name: String
  price: Float
  description: String
  image: String
  categoryId: ID
}
